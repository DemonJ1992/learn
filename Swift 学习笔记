##Swift 学习笔记

@(Markdown)

[toc]
###Closure
**闭包**是功能性自包含模块，可以在代码中被传递和使用。与 *C* 和 *Objective-C* 中的 *blocks* 相似
**闭包**可以**捕获**（*Capturing*）和存储所在上下文中任意常亮和变量的引用
**闭包**采取如下三种形式：
- 全局函数是一个有名字但不会捕获任何值的闭包
- 嵌套函数是一个有名字可以捕获其封闭函数域内值的闭包
- 闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的没有名字的闭包
####闭包表达式
``` swift
func str2str(str: String, block: ((String)->(String))) -> String {
	return block(str)
}
let str = "hello"

let block = {(str: String)->(String) in 
	return str + " world"
}
str2str(str: str, block: block)

str2str(str: str) { (str: String) -> (String) in
	return str + " world"
}

str2str(str: str) {$0 + " world"}
```
####@escaping @non-escaping
默认为@non-escapling
对于非逃逸型闭包：
1. 传递闭包给函数
2. 函数运行闭包内容
3. 函数返回
编译器对非逃逸型闭包的存储和调用会做内部的优化，逃逸型闭包不会产生循环引用
对于逃逸型闭包：函数会异步地执行闭包内容，不等待闭包执行完就会返回，使用 [*weak obj*] 防止循环引用
``` swift
func str2none(string: String, block: @escaping (String)->(String)) {
	DispatchQueue.main.async {
		_ = block(string)
	}
}
let str2 = "hello"

let block = { [weak str] (str: String)->(String) in
	print("str 2 is", str2 ?? "nil", "str 1 is", str) 
}

str2none(string: "world", block: block)
// 打印 "str 2 is nil str 1 is world"
```
####捕获（*Capture*）
``` swift
func makeIncrementor(forIncrement amount: Int) -> () -> Int {
	var runningTotal = 0
	func incrementor() -> Int {
		runningTotal += amount
		return runningTotal
	}
	return incrementor
}
```
*incrementor* 函数捕获了 *runningTotal* 和 *amount* 两个变量
闭包与函数都是引用类型 
###类、结构体
相同点
- 定义属性用于储存值
- 定义方法用于提供功能
- 定义下标用于下标语法访问
- 定义初始化器用于初始化
- 通过扩展增加默认实现的功能
- 符合协议已对某类提供标准功能

不同点
- 类可以继承
- 类型转化允许运行时检查和解释类实例类型
- 反初始化器允许类实例释放所分配资源
- 一个类实例可被多次引用，结构体只能被复制
``` swift
class obj {
	var name: String
	var array = [0, 1, 2]
	subscript(param: Int)->Int {
		set {
			self.array[param] = newValue
		}
		get {
			return self.array[param]
		}
	}
	init(name: String) {
		self.name = name
	}
	convenience init() {
		self.init(name: "dog son")
	}
	deinit {
		print(self.name, "is dead")
	}
	func sayHello() -> () {
		print("hello", self.name)
	}
}

struct objs {
	var name: String
	init(name: String) {
		self.name = name
	}
	init() {
		self.init(name: "dog son")
	}
	func sayHello() -> () {
		print("hello", self.name)
	}
}
```
###枚举
枚举为一系列相关联的值定义了一个公共的组类型，同时能够类型安全的情况使用这些值
``` swift
enum Direction {
	case north
	case south
	case east
	case west
}

func printDirection(param: Direction) {
	switch tmp {
	case .east: print("direction east")
	case .south: print("direction south")
	case .west: print("direction west")
	case .north: print("direction north")
	}
}

var tmp = Direction.east
tmp = .west

printDirection(tmp)
```
####关联值
枚举类型可以关联任何类型，甚至每个成员可以有不同的关联类型
``` swift
enum Barcode {
	case UPCA(Int, Int, Int)
	case QRCode(String)
}

func printBarcode(param: Barcode) {
	switch param {
    case let .QRCode(str): print("value is", str)
    case let .UPCA(num0, num1, num2): print(num0, num1, num2)
    }
}

var code = Barcode.UPCA(1, 2, 3)
code = .QRCode("hello dog son")

printBarcode(code)
```
####原始值
枚举类型还可以预设**默认值**，这些值的类型必须是相同的
``` swift
enum Pets: String {
	case dogson = "汪汪"
	case cat = "喵星人"
}
print(Pets.dogson.rawValue)

let dog = Pets.init(rawValue: "汪汪")
print(dog?.rawValue ?? "haha")
```
####可选类型
*Swift* 中的 *可选类型* 就是一个枚举
``` swift
public enum Optional<Wrapped>: ExpressibleByNilLiteral {
	case none
	case some(Wrapped)
	public init(_ some: Wrapped)
	public func map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?
	public func flatMap<U>(_ transform: (Wrapped) throws -> U?) rethrows -> U?
	public init(nilLiteral: ())
	public var unsafelyUnwrapped: Wrapped { get }
} 
```
####SwiftJSON

###泛型、指针
*Swift* 是静态语言，变量类型在编译时就已经确定。为了写出更灵活的、可重用的代码，*Swift* 提供了泛型，例如 *Array* 和 *Dictionary* 都是泛型集
####泛型函数
交换两个变量，无需指定变量类型，只要确保两个变量属于同一个类型
``` swift
func swapN<T>(_ a: inout T, _ b: inout T) {
	let c = a
	a = b
	b = c
}

var a = "dog"
var b = "cat"
swapN(&a, &b)

var c = 12
var d = 20
swapN(&c, &d)
```
####泛型集合
``` swift
struct Stack<T> {
	var items = Array<T>()
	mutating func push(_ item: T) {
		items.append(item)
	}
	mutating fuc pop() -> T {
		return items.removeLast()
	}
}
```
####类型约束
上述的泛型可以作用于任何类型，但有时候对使用在泛型函数和泛型类型上的类型强制约束为某种特定类型是非常有用的。
可以写一个在类型参数名后面的类型约束，通过冒号分割，作为类型参数链的一部分
``` swift
func someFunc<T: someClass, someProtocol>(_ param: T) {
	// function body ...
}
```
####关联类型
*protocol* 中无法使用泛型，但提供了关联类型来提供类型约束
``` swift
protocol Pipe {
	associatedtype raw: Equatable
	mutating func getData(_ data: raw)
	mutating func pushData(_ data: raw)
}
```
*pipe* 协议规定了 *getData* 和 *pushData* 方法，并限定了输入输出相同类型数据
对于一个已经实现协议函数的类型，可以直接扩展该类型遵循协议
``` swift
struct myPipe {
	func getData(_ data: String) {
		print("did get data:", data)
		pushData(data)
	}
	func pushData(_data: String) {
		print("did push data:", data)
	}
}

extension myPipe: Pipe {}
```
更多的类型限定
``` swift
func checkTwoPipe<T0: Pipe, T1: Pipe>(_ pipe0: T0, _ pipe1: T1) -> Bool where T0.raw == T1.raw {
	return true
}
```
###错误处理
[see here](http://blog.csdn.net/kmyhy/article/details/52083804)
###协议、拓展