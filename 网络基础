##网络基础

@(Markdown)

[toc]
###TCP
*TCP* 是面向连接的协议，通过三次握手建立连接，通讯完成时需要拆除连接
基于 *TCP* 的服务有 *Telnet*、 *FTP*、*SMTP* 等
1. 第一次握手：建立连接时，客户端发送syn包到服务器，进入 *SYN_SENT* 状态，等待服务器确认 (SYN：同步序列编号(*Synchronize Sequence Numbers*))
2. 第二次握手：服务器收到syn包，必须确认客户端的SYN，自己发送一个SYN包，及SYN+ACK包，服务器进入 *SYN_RECV* 状态
3. 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK，发送完毕客户端和服务端进入 *ESTABLISHED* 状态，完成三次握手

*TCP* 连接是全双工的，因此每个方向都必须单独进行关闭。当一方完成它的数据发送任务后发送一个 *FIN* 来终止这个方向上的连接。收到一个 *FIN* 只意味着这个方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据，首先进行关闭的一方将执行主动关闭，另一方被动关闭
1. 第一次挥手：*TCP* 客户端发送一个 *FIN*，关闭客户端到服务器的数据传输
2. 第二次挥手：服务器收到这个 *FIN*，回复一个ACK，确认序号为收到的序号加1
3. 第三次挥手：服务器关闭客户端的连接，发送一个 *FIN* 给客户端
4. 第四次挥手：客户端回复ACE报文确认

###UDP
*UDP* 是面向无连接的通讯协议，*UDP* 数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送

###HTTP
超文本传输协议（HTTP，HyperText Transfer Protocol）是基于 *TCP* 的客户端与服务端请求和应答的标准
最基本的请求方法有四种，分别是 *GET*、*POST*、*PUT*、*DELETE*。对应查、改、增、删四种数据库操作
请求由三个部分组成 
- 请求方法、协议、版本
- 请求头
- 请求体
```
GET/sample.jspHTTP/1.1
Accept:image/gif.image/jpeg,*/*
Accept-Language:zh-cn
Connection:Keep-Alive
Host:localhost
User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)
Accept-Encoding:gzip,deflate
 
username=DEMONJ&password=12345678
```
####GET请求
请求参数附在URL之后，以?分割URL和传输数据，参数间以&相连 
`login.action?name=hyddd&password=idontknow&verify=%E4%BD%A0%E5%A5%BD`
*GET* 提交数据最多为1024字节，这个限制主要是部分浏览器对URL长度的限制
####POST请求
*POST* 请求参数放在请求体中，不会体现在URL中，相比 *GET* 较为安全
####Cookie
*Cookie* 是用于维持服务端session状态，通常由服务端写入，在后续请求中，供服务端读取
``` python
cookie = http.cookiejar.CookieJar()
handler = urllib.request.HTTPCookieProcessor(cookie)
opener = urllib.request.build_opener(handler)
response = opener.open('http://www.baidu.com')
for item in cookie:
	print('Name =', item.name)
	print('Value =', item.value)
```	
保存cookie
``` python
file_name = 'cookie.txt'
cookie = http.cookiejar.MozillaCookieJar(file_name)
handler = urllib.request.HTTPCookieProcessor(cookie)
opener = urllib.request.build_opener(handler)
response = opener.open('http://www.baidu.com')
cookie.save(ignore_discard=True, ignore_expires=True)
```
ignore_discard：即使cookies将被丢弃也将它保存
ignore_expires：如果文件中cookies已经存在，则覆盖原文件写入
从文件中获取cookie并访问
``` python
file_name = 'cookie.txt'
cookie = http.cookiejar.MozillaCookieJar()
cookie.load(file_name, ignore_discard=True, ignore_expires= True)
handler = urllib.request.HTTPCookieProcessor(cookie)
opener = urllib.request.build_opener(handler)
request = urllib.request.Request('http://www.baidu.com')
response = opener.open(request)
print(response.read())
```

###HTTPS
*HTTPS* 全称 Hyper Text Transfer Protocol over Secure Socket Layer。是 *HTTP* 的安全版，在 *HTTP* 下加入 *SSL* 层，使用端口443
*IETF* （Internet Engineering Task Force）将 *SSL* 升级为 *TLS* （Transport Layer Security）
*HTTPS* 在传输数据之前需要客户端与服务端之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。
*TLS/SSL*  使用了非对称加密，对称加密以及 *HASH* 算法。握手过程描述如下：
1. 客户端将自己支持的加密规则发送给服务端
2. 服务端从中选出一组加密算法与 *HASH* 算法，并将自己的身份信息以证书的形式发回客户端。证书中包含服务器地址，加密公钥，以及证书的颁发机构等信息
3. 获得服务端证书之后客户端要做以下工作：
	(a) 验证证书合法性
	(b) 如果证书受信，客户端生成随机密码，并用证书中的公钥加密
	(c) 使用约定好的 *HASH* 计算握手消息，并使用生成的随机密码利用对称加密算法对消息进行加密，最后将之前生成的所有消息发送给服务端
4. 服务端接收客户端发送的数据后：
	(a) 使用私钥将信息解密取出密码，使用密码解密客户端发送的握手消息，并验证 *HASH* 是否与客户端发来的一致
	(b) 使用密码加密一段握手消息，发送给客户端
5. 客户端解密并核对消息的 *HASH*， 如果与服务端发送的一致， 则握手过程结束， 之后所有通信数据将由之前客户端生成的随机密码利用对称加密算法加密  

非对称加密算法： *RSA*， *DSA/DSS*
对称加密算法： *AES*， *RC4*， *3DES*
*HASH* 算法： *MD5*， *SHA1*， *SHA256*
 